@model CoursesViewModel

<section class="courses">

    <div class="container">
        <div class="top-row">
            
            <h1>@Model.Title</h1>
            
            <div class="top-right">

                <div class="select" id="pageSizeSelect">

                    <svg xmlns="http://www.w3.org/2000/svg" class="drop-down-icon" pointer-events="inherit" viewBox="0 0 448 512">
                        <path fill="currentColor"
                              d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z" />
                    </svg>
                                       
                    <div class="selected" id="selectedPageSize" data-value="@Model.Pagination.PageSize">@Model.Pagination.PageSize</div>

                    <div class="select-options" id="pageSizeOptions">
                        @for (int i = 1; i <= Model.Pagination.TotalItems; i++)
                        {
                            if (i == Model.Pagination.TotalItems)
                            {
                                <div class="option" data-value="@i">Show All</div>
                            }
                            else
                            {
                                <div class="option" data-value="@i">@i</div>                                
                            }
                        }

                    </div>
                </div>

                <div class="select" id="selectCategory">

                    <svg xmlns="http://www.w3.org/2000/svg" class="drop-down-icon" pointer-events="inherit" viewBox="0 0 448 512">
                        <path
                            fill="currentColor"
                            d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"
                            />
                    </svg>

                    @if (!string.IsNullOrEmpty(Model.CategoryQuery) && Model.CategoryQuery != "all")
                    {
                        <div class="selected" id="selectedCategory">@Model.CategoryQuery</div>
                    }
                    else
                    {
                        <div class="selected" id="selectedCategory">All Categories</div>

                    }
                    <div class="select-options" id="categorySelectOptions">
                        <div class="option" data-value="all">All Categories</div>
                        @if (Model.Categories != null && Model.Categories.Count() > 0)
                        {
                            foreach (var category in Model.Categories)
                            {
                                <div class="option" data-value="@category.CategoryName">@category.CategoryName</div>
                            }
                        }
                    </div>
                </div>

                <div class="search-wrapper">
                    <input class="search-query" name="searchQuery" id="searchQuery" placeholder="Search courses" />
                    <i class="fa-light fa-search"></i>
                </div>

            </div>
        </div>

        <div class="grid-container items">
            @if (@Model.Courses.Count() >= 1)
            {
                foreach (var course in Model.Courses)
                {
                    <form class="bookmark-form" id="bookmarkForm" method="post" action="@Url.Action("BookmarkCourse", "Account", new { courseId = course.Id })">

                        <a class="grid-item card" asp-action="Details" asp-controller="Courses" asp-route-id="@course.Id">                  
                            <div class="img-wrapper">
                                <img class="course-image" src="/img/courses/@course.ImageUrl" alt="@course.AltText">
                                <p class="@(course.BestSeller ? "best-seller" : "hidden")">Best Seller</p>
                            </div>

                            <span class="bookmark-circle" onclick="submitForm(event)">
                                @if (@Model.SavedCourses.Count() > 0)
                                {
                                    @foreach (var savedCourse in @Model.SavedCourses)
                                    {
                                        if (course.Id == savedCourse.CourseId)
                                        {
                                            //gets filled in because the icon i solid.
                                            <i class="fa-solid fa-bookmark bookmark-filled"></i>                                            
                                        }
                                        else
                                        {
                                            // doesnt get filled in because the icon is only a border.
                                            <i class="fa-light fa-bookmark bookmark-empty"></i>
                                        }
                                    }
                                }
                                else
                                {
                                    <i class="fa-light fa-bookmark bookmark-empty"></i>
                                }
                            </span>

                            <div class="text-wrapper">

                                <div class="text-title">
                                    <h5 class="course-title">@course.Title</h5>
                                </div>

                                <div class="text-rest">
                                    <span class="by">By</span><span class="author">@course.Author</span>
                                    <div class="price-wrapper">
                                        <div class="@(course.DiscountPrice >= 1 ? "discount-price" : "hidden")">@course.Currency@course.DiscountPrice</div>
                                        <div class="@(course.DiscountPrice >= 1 ? "price discount-applied" : "price")">@course.Currency@course.Price</div>
                                    </div>
                                    <div class="divider"></div>
                                    <div class="description-wrapper">
                                        @{
                                            double likesInK = Math.Max(0, (Math.Round(course.NumberOfLikes / 1000.0, 1)));                                            

                                            <span class="description"><i class="fa-light fa-clock"></i> @course.LengthInHours hours</span>
                                            <span class="description"><i class="fa-light fa-thumbs-up"></i> @course.Rating% (@likesInK K)</span>
                                        }
                                    </div>
                                </div>

                            </div>
                        </a>
                    </form>
                }
            }
        </div>

        @if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
        {
            <div class="pagination">

                @{
                    var totalPages = Model.Pagination.TotalPages;
                    var currentPage = Model.Pagination.CurrentPage;
                    var previousPage = Model.Pagination.CurrentPage - 1;
                    var nextPage = Model.Pagination.CurrentPage + 1;
                    var tolerance = 2; // sets the size the number can deivate from currenPage to be printed IF the TotalPages exceed 5.
                    var totalPaginationButtons = 0;

                    <a class="btn-gray first-page" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = 1, pagesize = Model.Pagination.PageSize})"><i class="fa-solid fa-angles-left"></i></a>

                    if (previousPage < 1)
                    {
                        previousPage = totalPages;
                    }
                    <a class="btn-gray previous-page" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = previousPage, pagesize = Model.Pagination.PageSize})"><i class="fa-solid fa-angle-left"></i></a>


                    @for (int i = 1; i <= totalPages && totalPaginationButtons < 5; i++)
                    {
                        if (Model.Pagination.TotalPages <= 5)
                        {
                            if (i == Model.Pagination.CurrentPage) // Sets value of the currentpage button.
                            {
                                <span class="btn-theme current-page">@i</span>
                                totalPaginationButtons++;
                            }
                            else // Sets value of other pages if there are NO more than 5 total pages.
                            {
                                <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = i, pagesize = Model.Pagination.PageSize})">@i</a>
                                totalPaginationButtons++;
                            }
                        }
                        else // If more than 5 total pages.
                        {
                            if (currentPage == 1 && totalPaginationButtons == 0) // Prints the second to last and last page buttons prior to the current page button if current page is page 1.
                            {
                                <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = totalPages -1, pagesize = Model.Pagination.PageSize})">@Math.Abs(totalPages - 1)</a>
                                <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = totalPages, pagesize = Model.Pagination.PageSize})">@totalPages</a>
                                totalPaginationButtons += 2;
                            }

                            if (currentPage == 2 && totalPaginationButtons == 0) // Prints the last page prior to printing page 1 if current pages is page 2.
                            {
                                <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = totalPages, pagesize = Model.Pagination.PageSize})">@totalPages</a>
                                totalPaginationButtons++;
                            }

                            if (i == Model.Pagination.CurrentPage) // Prints the current page button
                            {
                                <span class="btn-theme current-page">@i</span>
                                totalPaginationButtons++;

                                if (Model.Pagination.CurrentPage == Model.Pagination.TotalPages && totalPaginationButtons >= 3) // If currentpage is the last page then this prints page button 1 and 2.
                                {
                                    <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = 1, pagesize = Model.Pagination.PageSize})">1</a>
                                    <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = 2, pagesize = Model.Pagination.PageSize})">2</a>
                                    totalPaginationButtons += 2;
                                }
                            }

                            else
                            {
                                if (Math.Abs(i - Model.Pagination.CurrentPage) <= tolerance) // Only prints a total of 2 buttons above or below the currentpage.
                                {
                                    <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = i, pagesize = Model.Pagination.PageSize})">@i</a>
                                    totalPaginationButtons++;
                                }
                                if (Model.Pagination.CurrentPage == Model.Pagination.TotalPages - 1 && totalPaginationButtons >= 4) // prints page button 1 when on the second to last page.
                                {
                                    <a class="btn-gray" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = 1, pagesize = Model.Pagination.PageSize})">1</a>
                                    totalPaginationButtons++;
                                }
                                else // skips other numbers
                                {
                                    continue;
                                }
                                if (totalPaginationButtons == 5) // breaks loop when totalbuttons are 5.
                                {
                                    break;
                                }
                            }
                        }
                        
                    }

                    if (nextPage > totalPages)
                    {
                        nextPage = 1;
                    }
                    <a class="btn-gray next-page" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber = nextPage, pagesize = Model.Pagination.PageSize})"><i class="fa-solid fa-angle-right"></i></a>

                    <a class="btn-gray last-page" href="@Url.Action("Index", new { category = Model.CategoryQuery, pageNumber =totalPages, pagesize = Model.Pagination.PageSize})"><i class="fa-solid fa-angles-right"></i></a>

                }
            </div>
        }

        <div class="get-started">
            <div class="text-wrapper">
                <p>Ready to get started?</p>
                <h2>Take Your<span class="theme-text"> Skill </span>to the Next Level</h2>
                <button class="btn-theme">Work with us</button>
            </div>
            <div class="image-wrapper">
                <img src="/img/office-worker.png" alt="">
            </div>
        </div>

    </div>
    <script src="~/js/coursesFilter.js"></script>

</section>